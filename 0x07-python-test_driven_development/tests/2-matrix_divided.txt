====================
2. Divide a matrix:
====================

Import module:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Function:
=======.
Write a function that divides all elements of a matrix.

Operations:
=========
‘div’ div must be a number (integer or float), otherwise raise a TypeError exception
with the message div must be a number:

‘div’ easy check:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

'div' float allowed
	>>> matrix_divided([[1, 2, 3], [4, 0.5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 0.17, 2.0]]

All elements of list must be a integer or float:
	>>> matrix_divided([[1, 2, "Hola"], [4, 0.5, 6]], 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided("Hello", 0)
Traceback (most recent call last):
	  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [
	...  [1, 2, 3],
	...  [2, 3, 4, 5]
	... ]
	>>> matrix_divided(matrix, 2)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

* Missing 2 arguments
>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

* Missing div argument
>>> matrix_divided(2)
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

* The matrix must be a list of integers or floats or raise error:
>>> matrix_divided(2, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
